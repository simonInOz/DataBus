# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

pool:
  vmImage: ubuntu-latest

steps:
- task: NodeTool@0
  inputs:
    versionSpec: '18.x'
  displayName: 'Install Node.js'

- script: |
    echo "Starting build"
    
    node --version
    npm --version
    
    echo "Files in build directory"
    ls -lah
    
    # Remove and re-create the existing build folder if it exists
    rm -rf backDBU/public
    mkdir backDBU/public
    mkdir backDBU/dist
    mkdir backDBU/dist/public

      echo "Building and using the new 'frontDBU' frontend project."
      
      cd frontDBU
      yarn install
      yarn audit
      ret=$?
      if [[ $ret -gt 12 ]]; then
        echo "Project frontDBU contains critical vulnerabilities."
        exit 2
      else
        echo "Project frontDBU contains _NO_ critical vulnerabilities."
      fi
      yarn build
      ls -lah dist/
      echo "Finished building the new frontDBU frontend project. Copying files into backend."
      
      cd ..
     
      # Copy the new frontDBU frontend compiled files into the public directory so it can be run and into the build 'dist' folder so it can be built
      cp -R frontDBU/dist/. backDBU/public/
      cp -R frontDBU/dist/. backDBU/dist/public

    echo "Static frontend files copied. Building backend."
    cd backDBU
    yarn install
  
    yarn audit
    ret=$?
    if [[ $ret -gt 12 ]]; then
      echo "Project backend contains critical vulnerabilities."
      echo "Vulnerabilities exist within backend project. Project build will not fail for now."
      echo "Vulnerabilities exist within backend project. Project build will not fail for now."
      echo "Vulnerabilities exist within backend project. Project build will not fail for now."
      echo "Normally this would fail the pipeline but this check has been removed until the vulnerabilities are addressed."
      # exit 3
    else
      echo "Project backend contains _NO_ critical vulnerabilities."
    fi
    
    # yarn build
    echo "Finished building backend. Archiving package."

    echo "Found version " 
    zip -r psms-$(npm version | grep vue | sed -re "s/'backDBU': '//g" | sed "s/',//g")-$(git rev-parse --short HEAD).zip ./
    
    ls -lah
  displayName: 'Run a multi-line script'

- task: CopyFiles@2
  inputs:
    SourceFolder: '$(System.DefaultWorkingDirectory)/backDBU/'
    Contents: |
      *.zip
    TargetFolder: '$(Build.ArtifactStagingDirectory)'

- task: PublishBuildArtifacts@1
  inputs:
    pathToPublish: '$(Build.ArtifactStagingDirectory)'
    artifactName: 'DataBus-dev-$(Build.BuildNumber)-$(Build.SourceBranchName)'


- task: AzureWebApp@1
  displayName: 'Azure Web App Deploy: DataBus-dev-main'
  inputs:
    azureSubscription: 'Telstra CSP (b7a59d67-a1a3-4b42-955b-90e662048c48)'
    appType: 'webAppLinux'
    appName: 'DataBus-dev-main'
    package: '$(System.DefaultWorkingDirectory)/**/psms-*.zip'
    runtimeStack: 'NODE|18-lts'
    startUpCommand: 'node bin/www'
